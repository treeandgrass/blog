{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","path":"fancybox/jquery.fancybox.min.css","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","path":"fancybox/jquery.fancybox.min.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.4.1.min.js","path":"js/jquery-3.4.1.min.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","path":"js/script.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.woff2","path":"css/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":1,"renderable":1}],"Cache":[{"_id":"source/_posts/introduce.md","hash":"98c4ffb457babe20e10e368f13f2bb39d6f88cf6","modified":1628341732385},{"_id":"source/_posts/noderpc.md","hash":"40b571a1c1089fec62cd2808788b4e8a118640f8","modified":1628341849172},{"_id":"node_modules/hexo-theme-landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/README.md","hash":"d2772ece6d4422ccdaa0359c3e07588834044052","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/_config.yml","hash":"b608c1f1322760dce9805285a602a95832730a2e","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/package.json","hash":"d4d1c9314a78b48d5cd7b3f9ffda98c87af6a5db","modified":1628341040291},{"_id":"node_modules/hexo-theme-landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/en.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/hu.yml","hash":"284d557130bf54a74e7dcef9d42096130e4d9550","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/it.yml","hash":"89b7d91306b2c1a0f3ac023b657bf974f798a1e8","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/mn.yml","hash":"2e7523951072a9403ead3840ad823edd1084c116","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/tr.yml","hash":"a1cdbfa17682d7a971de8ab8588bf57c74224b5b","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/zh-CN.yml","hash":"1efd95774f401c80193eac6ee3f1794bfe93dc5a","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/layout.ejs","hash":"0d1765036e4874500e68256fedb7470e96eeb6ee","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/scripts/fancybox.js","hash":"c857d7a5e4a5d71c743a009c5932bf84229db428","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/after-footer.ejs","hash":"414914ebb159fac1922b056b905e570ac7521925","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive.ejs","hash":"7cb70a7a54f8c7ae49b10d1f37c0a9b74eab8826","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/article.ejs","hash":"dfd555c00e85ffc4207c88968d12b219c1f086ec","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/footer.ejs","hash":"3656eb692254346671abc03cb3ba1459829e0dce","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/gauges-analytics.ejs","hash":"21a1e2a3907d1a3dad1cd0ab855fe6735f233c74","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/google-analytics.ejs","hash":"2ea7442ea1e1a8ab4e41e26c563f58413b59a3d0","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/head.ejs","hash":"f215d92a882247a7cc5ea80b241bedfcec0ea6ca","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/header.ejs","hash":"c1acd247e14588cdf101a69460cb8319c18cd078","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/recent_posts.ejs","hash":"60c4b012dcc656438ff59997e60367e5a21ab746","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_variables.styl","hash":"581b0cbefdaa5f894922133989dd2d3bf71ded79","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","hash":"9c451e5efd72c5bb8b56e8c2b94be731e99db05b","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","hash":"998ed4c5b147e1299bf62beebf33514474f28112","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/date.ejs","hash":"f1458584b679545830b75bef2526e2f3eb931045","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/title.ejs","hash":"4d7e62574ddf46de9b41605fe3140d77b5ddb26d","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/article.styl","hash":"80759482d07063c091e940f964a1cf6693d3d406","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.4.1.min.js","hash":"88523924351bac0b5d560fe0c5781e2556e7693d","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":499162500000},{"_id":"public/2021/08/07/introduce/index.html","hash":"f0d818c410f98856caabf403eb8d0cafb5d6f02d","modified":1628342178526},{"_id":"public/archives/index.html","hash":"b92441b0a73e747b50bc68c6e5d68714944faa65","modified":1628342178526},{"_id":"public/archives/2021/index.html","hash":"e29bf310578f52cd4525267405223f20791703bf","modified":1628342178526},{"_id":"public/archives/2021/08/index.html","hash":"f2dc19d3d500b5717df3ee5259c76072d3edf886","modified":1628342178526},{"_id":"public/2021/08/07/noderpc/index.html","hash":"554ccaf7146385bf949d84d7d7a8608ee751f8f2","modified":1628342178526},{"_id":"public/index.html","hash":"c2dd208ad16a0a9947362771bcc87fcb3dc65e24","modified":1628342178526},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1628342178526},{"_id":"public/css/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1628342178526},{"_id":"public/css/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1628342178526},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1628342178526},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1628342178526},{"_id":"public/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1628342178526},{"_id":"public/js/script.js","hash":"998ed4c5b147e1299bf62beebf33514474f28112","modified":1628342178526},{"_id":"public/css/style.css","hash":"263d98c93ae32dda6f7bbc8473105f3c441aca99","modified":1628342178526},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1628342178526},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1628342178526},{"_id":"public/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1628342178526},{"_id":"public/js/jquery-3.4.1.min.js","hash":"88523924351bac0b5d560fe0c5781e2556e7693d","modified":1628342178526}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"开始的开始","date":"2021-08-07T12:58:35.000Z","_content":"\n>维基百科：在通信和信息处理中，代码（code）是指一套转换信息的规则系统，例如将一个字母、单词、声音、图像或手势转换为另一种形式或表达，有时还会缩短或加密以便通过某种信道或存储媒体通信。一个最早的例子是语言的发明，它使人可以通过说话将他看到、听到、感受到或想到的事情表达给其他人。但是，说话的通信范围局限于声音可以有效传播、辨识的范围，并且发言只能传达给现有的听众。将言谈转化为视觉符号的写作扩大了跨越时间、空间的通信表达。代码有时亦称代号等。而编码（encoding）能将源头的信息转化为便于通信或存储的符号。解码（Decoding）则是将其逆向还原的过程，将代码符号转化回收件人可以理解的形式。编码的其中一个原因是在平实语言、口语或写作难以实现实现的情况下进行通信。例如，旗语可以用特定标记表达特定信息，站在远处的另一个人可以解读标识来重现该信息。\n","source":"_posts/introduce.md","raw":"---\ntitle: 开始的开始\ndate: 2021-08-07 20:58:35\ntags:\n---\n\n>维基百科：在通信和信息处理中，代码（code）是指一套转换信息的规则系统，例如将一个字母、单词、声音、图像或手势转换为另一种形式或表达，有时还会缩短或加密以便通过某种信道或存储媒体通信。一个最早的例子是语言的发明，它使人可以通过说话将他看到、听到、感受到或想到的事情表达给其他人。但是，说话的通信范围局限于声音可以有效传播、辨识的范围，并且发言只能传达给现有的听众。将言谈转化为视觉符号的写作扩大了跨越时间、空间的通信表达。代码有时亦称代号等。而编码（encoding）能将源头的信息转化为便于通信或存储的符号。解码（Decoding）则是将其逆向还原的过程，将代码符号转化回收件人可以理解的形式。编码的其中一个原因是在平实语言、口语或写作难以实现实现的情况下进行通信。例如，旗语可以用特定标记表达特定信息，站在远处的另一个人可以解读标识来重现该信息。\n","slug":"introduce","published":1,"updated":"2021-08-07T13:08:52.385Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks1sw2aq0000jolnd4qodeg1","content":"<blockquote>\n<p>维基百科：在通信和信息处理中，代码（code）是指一套转换信息的规则系统，例如将一个字母、单词、声音、图像或手势转换为另一种形式或表达，有时还会缩短或加密以便通过某种信道或存储媒体通信。一个最早的例子是语言的发明，它使人可以通过说话将他看到、听到、感受到或想到的事情表达给其他人。但是，说话的通信范围局限于声音可以有效传播、辨识的范围，并且发言只能传达给现有的听众。将言谈转化为视觉符号的写作扩大了跨越时间、空间的通信表达。代码有时亦称代号等。而编码（encoding）能将源头的信息转化为便于通信或存储的符号。解码（Decoding）则是将其逆向还原的过程，将代码符号转化回收件人可以理解的形式。编码的其中一个原因是在平实语言、口语或写作难以实现实现的情况下进行通信。例如，旗语可以用特定标记表达特定信息，站在远处的另一个人可以解读标识来重现该信息。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>维基百科：在通信和信息处理中，代码（code）是指一套转换信息的规则系统，例如将一个字母、单词、声音、图像或手势转换为另一种形式或表达，有时还会缩短或加密以便通过某种信道或存储媒体通信。一个最早的例子是语言的发明，它使人可以通过说话将他看到、听到、感受到或想到的事情表达给其他人。但是，说话的通信范围局限于声音可以有效传播、辨识的范围，并且发言只能传达给现有的听众。将言谈转化为视觉符号的写作扩大了跨越时间、空间的通信表达。代码有时亦称代号等。而编码（encoding）能将源头的信息转化为便于通信或存储的符号。解码（Decoding）则是将其逆向还原的过程，将代码符号转化回收件人可以理解的形式。编码的其中一个原因是在平实语言、口语或写作难以实现实现的情况下进行通信。例如，旗语可以用特定标记表达特定信息，站在远处的另一个人可以解读标识来重现该信息。</p>\n</blockquote>\n"},{"title":"Node Rpc","_content":"\n## About this Repo\n\nIt's a lite rpc framework base on Node.js. \n\ncode source: https://github.com/node-rpc/node-rpc\n\nwith some features:\n* using hessian protocol impleaments encode and decode operation.\n* support middileware mechanism which is same as koa.\n* can reiceve request base on event's behavior.\n* support customize define your own decoder and encoder.\n* Load balancing base on Zookeeper\n\n## Usage\n\n### install\n\n```\nnpm i node-rpc-lite\n```\n\n### direct connection mode\n\n#### client\n\n``` js\nimport { Client } from \"node-rpc-lite\";\nimport signale from \"signale\";\n\nconst port: number = 9000;\nconst ip: string = \"127.0.0.1\";\nconst duration: number = 100;\n\nconst client: Client = new Client({\n    duration,\n    ip,\n    port,\n});\n\nclient.connect();\nsignale.debug(\"connect success !!\");\n\nconst message = {\n    data: {\n        arr: [],\n    },\n    identifier: \"querywork\",\n    msg: \"success\",\n    status: 200,\n};\n\nclient.on(\"data\", (msg) => {\n    signale.debug(\"client recieve data:\");\n    signale.debug(msg);\n\n    client.close();\n});\n\n\nclient.push(message);\n\n\n```\n\n#### Server\n\n```js\nimport { Context, IServerConfig, NextFNType, Router, Server, V1Decode, V1Encode, Writer } from \"node-rpc-lite\";\nimport signale from \"signale\";\n\nconst config: IServerConfig = {\n    duration: 500,\n    ip: \"127.0.0.1\",\n    port: 9000,\n};\n\nconst decode: V1Decode = new V1Decode();\nconst encode: V1Encode = new V1Encode();\nconst writer: Writer = new Writer();\n\nconst log = async (ctx: Context, next: NextFNType) => {\n    signale.debug(\"request is comming\");\n\n    if (next) {\n        await next();\n    }\n};\n\n// 路由\nconst router: Router = new Router();\nrouter.on(\"querywork\", async (ctx: Context) => {\n\n    await new Promise((resolve) => {\n        setTimeout(() => {\n            ctx.dataWillBeEncode = {\n                send: \"send data after waiting 1000 ms\",\n            };\n            resolve();\n        }, 1000);\n    });\n\n    signale.debug(`recive data ${JSON.stringify(ctx.receive)}`);\n});\n\nconst server: Server = new Server(config);\n\nserver.use(decode.use);\nserver.use(router.route);\nserver.use(log);\nserver.use(encode.use);\nserver.use(writer.use);\n\nserver.on(\"start\", (conf) => {\n    signale.debug(`server start ${conf.host}: ${conf.port}`);\n});\n\nserver.start();\n\n```\n\n### Use node-agent-cli start multiple rpc server\n\n[please view example](https://github.com/node-rpc/node-rpc-examples/blob/master/package.json#L12), also could use [node-agent-cli](https://github.com/node-rpc/node-agent).\n\n\n### Using with Koa and Load balancing base on zookeeper\n\n\n#### Ready to work\n\nYou need to install Zookeeper locally, you can use docker to install the zookeeper image.\nreference：\n* https://zookeeper.apache.org/doc/current/zookeeperStarted.html\n* https://hub.docker.com/_/zookeeper\n\n#### Coding\n\n##### server\n\n```js\n\nimport { Context, IServerConfig, NextFNType, Router, Server, V1Decode, V1Encode, Writer,  ZKClient } from \"node-rpc-lite\";\nimport signale from \"signale\";\nimport uuid from \"uuid/v1\";\nimport ZooKeeper from \"zookeeper\";\n\nconst config: IServerConfig = {\n    duration: 500,\n    ip: \"127.0.0.1\",\n    port: 9001,\n};\n\nconst namespacePath = \"/node-rpc\";\n\nconst decode: V1Decode = new V1Decode();\nconst encode: V1Encode = new V1Encode();\nconst writer: Writer = new Writer();\nconst zkClient = new ZKClient({\n    connect: \"127.0.0.1:2181\",\n    debug_level: ZooKeeper.ZOO_LOG_LEVEL_WARN,\n    host_order_deterministic: false,\n    timeout: 5000,\n});\n\nconst log = async (ctx: Context, next: NextFNType) => {\n    signale.debug(\"request is comming\");\n\n    if (next) {\n        await next();\n    }\n};\n\nconst uid: string = uuid();\n\n// 路由\nconst router: Router = new Router();\nrouter.on(\"querywork\", async (ctx: Context) => {\n\n    await new Promise((resolve) => {\n        setTimeout(() => {\n            ctx.dataWillBeEncode = {\n                send: \"send data after waiting 1000 ms\",\n            };\n            resolve();\n        }, 1000);\n    });\n\n    signale.debug(`recive data ${JSON.stringify(ctx.receive)}, uuid: ${uid}`);\n});\n\nconst server: Server = new Server(config);\n\nserver.use(decode.use);\nserver.use(router.route);\nserver.use(log);\nserver.use(encode.use);\nserver.use(writer.use);\n\nconst register =  async (conf: any) => {\n    const path = `${namespacePath}/${conf.host}-${conf.port}`;\n    await zkClient.connect();\n    const isExit = await zkClient.exist(path, () => {\n        //\n    });\n    if (!isExit) {\n        await zkClient.mkdirp(path, () => {\n            //\n        });\n    }\n    signale.debug(`server start ${conf.host}: ${conf.port}, uuid: ${uid}`);\n};\n\n\nserver.on(\"start\", register);\n\nserver.start();\n\n```\n\n##### client\n\n```js\nimport Router from \"@koa/router\";\nimport Koa from \"koa\";\nimport { Client, ISelectElement, IStrategy, StrategyFactory, ZKClient } from \"node-rpc-lite\";\nimport signale from \"signale\";\nimport ZooKeeper from \"zookeeper\";\n\nconst namespacePath = \"/node-rpc\";\n\n\nconst zkClient = new ZKClient({\n    connect: \"127.0.0.1:2181\",\n    debug_level: ZooKeeper.ZOO_LOG_LEVEL_WARN,\n    host_order_deterministic: false,\n    timeout: 5000,\n});\nconst app = new Koa();\nconst router = new Router();\n\nrouter.get(\"/rpc/get\", async (ctx, next) => {\n\n    const message = {\n        data: {\n            arr: [],\n        },\n        identifier: \"querywork\",\n        msg: \"success\",\n        status: 200,\n    };\n\n    const list: string[] = zkClient.getNodeMap().get(namespacePath);\n    const els: ISelectElement[] = list.map((value: string) => {\n        const pairs = value.split(\"-\");\n        return {\n            ip: pairs[0],\n            port: pairs[1] as unknown as number,\n        };\n    });\n\n    // consistent hash\n    const factory: StrategyFactory<ISelectElement> = new StrategyFactory();\n    const consistentStrategy: IStrategy<ISelectElement> = factory.build(els, \"c\");\n    const testContent: string = `127.0.0.1_${Math.random()}`;\n    const node: ISelectElement = consistentStrategy.select(testContent);\n\n    const client: Client = new Client({\n        duration: 500,\n        ip: node.ip,\n        port: node.port,\n    });\n\n    client.connect();\n    const work = new Promise((resolve) => {\n        client.on(\"data\", (msg) => {\n            ctx.response.body = msg;\n            resolve();\n        });\n    });\n    client.push(message);\n\n    await work;\n\n});\n\n\napp\n  .use(router.routes())\n  .use(router.allowedMethods());\n\n(async () => {\n    await zkClient.connect();\n    zkClient.listen(namespacePath);\n    app.listen(3000, () => {\n        signale.debug(\"app start at port 3000!\");\n    });\n})();\n\n\n```\n\n#### code example is at [here](https://github.com/node-rpc/node-rpc-examples/blob/master/package.json#L12)\nTip: run above code and visit http://localhost:3000/rpc/get","source":"_posts/noderpc.md","raw":"---\ntitle: Node Rpc\n---\n\n## About this Repo\n\nIt's a lite rpc framework base on Node.js. \n\ncode source: https://github.com/node-rpc/node-rpc\n\nwith some features:\n* using hessian protocol impleaments encode and decode operation.\n* support middileware mechanism which is same as koa.\n* can reiceve request base on event's behavior.\n* support customize define your own decoder and encoder.\n* Load balancing base on Zookeeper\n\n## Usage\n\n### install\n\n```\nnpm i node-rpc-lite\n```\n\n### direct connection mode\n\n#### client\n\n``` js\nimport { Client } from \"node-rpc-lite\";\nimport signale from \"signale\";\n\nconst port: number = 9000;\nconst ip: string = \"127.0.0.1\";\nconst duration: number = 100;\n\nconst client: Client = new Client({\n    duration,\n    ip,\n    port,\n});\n\nclient.connect();\nsignale.debug(\"connect success !!\");\n\nconst message = {\n    data: {\n        arr: [],\n    },\n    identifier: \"querywork\",\n    msg: \"success\",\n    status: 200,\n};\n\nclient.on(\"data\", (msg) => {\n    signale.debug(\"client recieve data:\");\n    signale.debug(msg);\n\n    client.close();\n});\n\n\nclient.push(message);\n\n\n```\n\n#### Server\n\n```js\nimport { Context, IServerConfig, NextFNType, Router, Server, V1Decode, V1Encode, Writer } from \"node-rpc-lite\";\nimport signale from \"signale\";\n\nconst config: IServerConfig = {\n    duration: 500,\n    ip: \"127.0.0.1\",\n    port: 9000,\n};\n\nconst decode: V1Decode = new V1Decode();\nconst encode: V1Encode = new V1Encode();\nconst writer: Writer = new Writer();\n\nconst log = async (ctx: Context, next: NextFNType) => {\n    signale.debug(\"request is comming\");\n\n    if (next) {\n        await next();\n    }\n};\n\n// 路由\nconst router: Router = new Router();\nrouter.on(\"querywork\", async (ctx: Context) => {\n\n    await new Promise((resolve) => {\n        setTimeout(() => {\n            ctx.dataWillBeEncode = {\n                send: \"send data after waiting 1000 ms\",\n            };\n            resolve();\n        }, 1000);\n    });\n\n    signale.debug(`recive data ${JSON.stringify(ctx.receive)}`);\n});\n\nconst server: Server = new Server(config);\n\nserver.use(decode.use);\nserver.use(router.route);\nserver.use(log);\nserver.use(encode.use);\nserver.use(writer.use);\n\nserver.on(\"start\", (conf) => {\n    signale.debug(`server start ${conf.host}: ${conf.port}`);\n});\n\nserver.start();\n\n```\n\n### Use node-agent-cli start multiple rpc server\n\n[please view example](https://github.com/node-rpc/node-rpc-examples/blob/master/package.json#L12), also could use [node-agent-cli](https://github.com/node-rpc/node-agent).\n\n\n### Using with Koa and Load balancing base on zookeeper\n\n\n#### Ready to work\n\nYou need to install Zookeeper locally, you can use docker to install the zookeeper image.\nreference：\n* https://zookeeper.apache.org/doc/current/zookeeperStarted.html\n* https://hub.docker.com/_/zookeeper\n\n#### Coding\n\n##### server\n\n```js\n\nimport { Context, IServerConfig, NextFNType, Router, Server, V1Decode, V1Encode, Writer,  ZKClient } from \"node-rpc-lite\";\nimport signale from \"signale\";\nimport uuid from \"uuid/v1\";\nimport ZooKeeper from \"zookeeper\";\n\nconst config: IServerConfig = {\n    duration: 500,\n    ip: \"127.0.0.1\",\n    port: 9001,\n};\n\nconst namespacePath = \"/node-rpc\";\n\nconst decode: V1Decode = new V1Decode();\nconst encode: V1Encode = new V1Encode();\nconst writer: Writer = new Writer();\nconst zkClient = new ZKClient({\n    connect: \"127.0.0.1:2181\",\n    debug_level: ZooKeeper.ZOO_LOG_LEVEL_WARN,\n    host_order_deterministic: false,\n    timeout: 5000,\n});\n\nconst log = async (ctx: Context, next: NextFNType) => {\n    signale.debug(\"request is comming\");\n\n    if (next) {\n        await next();\n    }\n};\n\nconst uid: string = uuid();\n\n// 路由\nconst router: Router = new Router();\nrouter.on(\"querywork\", async (ctx: Context) => {\n\n    await new Promise((resolve) => {\n        setTimeout(() => {\n            ctx.dataWillBeEncode = {\n                send: \"send data after waiting 1000 ms\",\n            };\n            resolve();\n        }, 1000);\n    });\n\n    signale.debug(`recive data ${JSON.stringify(ctx.receive)}, uuid: ${uid}`);\n});\n\nconst server: Server = new Server(config);\n\nserver.use(decode.use);\nserver.use(router.route);\nserver.use(log);\nserver.use(encode.use);\nserver.use(writer.use);\n\nconst register =  async (conf: any) => {\n    const path = `${namespacePath}/${conf.host}-${conf.port}`;\n    await zkClient.connect();\n    const isExit = await zkClient.exist(path, () => {\n        //\n    });\n    if (!isExit) {\n        await zkClient.mkdirp(path, () => {\n            //\n        });\n    }\n    signale.debug(`server start ${conf.host}: ${conf.port}, uuid: ${uid}`);\n};\n\n\nserver.on(\"start\", register);\n\nserver.start();\n\n```\n\n##### client\n\n```js\nimport Router from \"@koa/router\";\nimport Koa from \"koa\";\nimport { Client, ISelectElement, IStrategy, StrategyFactory, ZKClient } from \"node-rpc-lite\";\nimport signale from \"signale\";\nimport ZooKeeper from \"zookeeper\";\n\nconst namespacePath = \"/node-rpc\";\n\n\nconst zkClient = new ZKClient({\n    connect: \"127.0.0.1:2181\",\n    debug_level: ZooKeeper.ZOO_LOG_LEVEL_WARN,\n    host_order_deterministic: false,\n    timeout: 5000,\n});\nconst app = new Koa();\nconst router = new Router();\n\nrouter.get(\"/rpc/get\", async (ctx, next) => {\n\n    const message = {\n        data: {\n            arr: [],\n        },\n        identifier: \"querywork\",\n        msg: \"success\",\n        status: 200,\n    };\n\n    const list: string[] = zkClient.getNodeMap().get(namespacePath);\n    const els: ISelectElement[] = list.map((value: string) => {\n        const pairs = value.split(\"-\");\n        return {\n            ip: pairs[0],\n            port: pairs[1] as unknown as number,\n        };\n    });\n\n    // consistent hash\n    const factory: StrategyFactory<ISelectElement> = new StrategyFactory();\n    const consistentStrategy: IStrategy<ISelectElement> = factory.build(els, \"c\");\n    const testContent: string = `127.0.0.1_${Math.random()}`;\n    const node: ISelectElement = consistentStrategy.select(testContent);\n\n    const client: Client = new Client({\n        duration: 500,\n        ip: node.ip,\n        port: node.port,\n    });\n\n    client.connect();\n    const work = new Promise((resolve) => {\n        client.on(\"data\", (msg) => {\n            ctx.response.body = msg;\n            resolve();\n        });\n    });\n    client.push(message);\n\n    await work;\n\n});\n\n\napp\n  .use(router.routes())\n  .use(router.allowedMethods());\n\n(async () => {\n    await zkClient.connect();\n    zkClient.listen(namespacePath);\n    app.listen(3000, () => {\n        signale.debug(\"app start at port 3000!\");\n    });\n})();\n\n\n```\n\n#### code example is at [here](https://github.com/node-rpc/node-rpc-examples/blob/master/package.json#L12)\nTip: run above code and visit http://localhost:3000/rpc/get","slug":"noderpc","published":1,"date":"2021-08-07T12:57:15.411Z","updated":"2021-08-07T13:10:49.172Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks1sw2au0001jolncpjeb462","content":"<h2 id=\"About-this-Repo\"><a href=\"#About-this-Repo\" class=\"headerlink\" title=\"About this Repo\"></a>About this Repo</h2><p>It’s a lite rpc framework base on Node.js. </p>\n<p>code source: <a href=\"https://github.com/node-rpc/node-rpc\">https://github.com/node-rpc/node-rpc</a></p>\n<p>with some features:</p>\n<ul>\n<li>using hessian protocol impleaments encode and decode operation.</li>\n<li>support middileware mechanism which is same as koa.</li>\n<li>can reiceve request base on event’s behavior.</li>\n<li>support customize define your own decoder and encoder.</li>\n<li>Load balancing base on Zookeeper</li>\n</ul>\n<h2 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h2><h3 id=\"install\"><a href=\"#install\" class=\"headerlink\" title=\"install\"></a>install</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i node-rpc-lite</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"direct-connection-mode\"><a href=\"#direct-connection-mode\" class=\"headerlink\" title=\"direct connection mode\"></a>direct connection mode</h3><h4 id=\"client\"><a href=\"#client\" class=\"headerlink\" title=\"client\"></a>client</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Client &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;node-rpc-lite&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> signale <span class=\"keyword\">from</span> <span class=\"string\">&quot;signale&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> port: number = <span class=\"number\">9000</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> ip: string = <span class=\"string\">&quot;127.0.0.1&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> duration: number = <span class=\"number\">100</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> client: Client = <span class=\"keyword\">new</span> Client(&#123;</span><br><span class=\"line\">    duration,</span><br><span class=\"line\">    ip,</span><br><span class=\"line\">    port,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">client.connect();</span><br><span class=\"line\">signale.debug(<span class=\"string\">&quot;connect success !!&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> message = &#123;</span><br><span class=\"line\">    <span class=\"attr\">data</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">arr</span>: [],</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">identifier</span>: <span class=\"string\">&quot;querywork&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">msg</span>: <span class=\"string\">&quot;success&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">status</span>: <span class=\"number\">200</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">client.on(<span class=\"string\">&quot;data&quot;</span>, <span class=\"function\">(<span class=\"params\">msg</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    signale.debug(<span class=\"string\">&quot;client recieve data:&quot;</span>);</span><br><span class=\"line\">    signale.debug(msg);</span><br><span class=\"line\"></span><br><span class=\"line\">    client.close();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">client.push(message);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Server\"><a href=\"#Server\" class=\"headerlink\" title=\"Server\"></a>Server</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Context, IServerConfig, NextFNType, Router, Server, V1Decode, V1Encode, Writer &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;node-rpc-lite&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> signale <span class=\"keyword\">from</span> <span class=\"string\">&quot;signale&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> config: IServerConfig = &#123;</span><br><span class=\"line\">    <span class=\"attr\">duration</span>: <span class=\"number\">500</span>,</span><br><span class=\"line\">    <span class=\"attr\">ip</span>: <span class=\"string\">&quot;127.0.0.1&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">port</span>: <span class=\"number\">9000</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> decode: V1Decode = <span class=\"keyword\">new</span> V1Decode();</span><br><span class=\"line\"><span class=\"keyword\">const</span> encode: V1Encode = <span class=\"keyword\">new</span> V1Encode();</span><br><span class=\"line\"><span class=\"keyword\">const</span> writer: Writer = <span class=\"keyword\">new</span> Writer();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> log = <span class=\"keyword\">async</span> (ctx: Context, <span class=\"attr\">next</span>: NextFNType) =&gt; &#123;</span><br><span class=\"line\">    signale.debug(<span class=\"string\">&quot;request is comming&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (next) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">await</span> next();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 路由</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> router: Router = <span class=\"keyword\">new</span> Router();</span><br><span class=\"line\">router.on(<span class=\"string\">&quot;querywork&quot;</span>, <span class=\"keyword\">async</span> (ctx: Context) =&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">await</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">            ctx.dataWillBeEncode = &#123;</span><br><span class=\"line\">                <span class=\"attr\">send</span>: <span class=\"string\">&quot;send data after waiting 1000 ms&quot;</span>,</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\">            resolve();</span><br><span class=\"line\">        &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    signale.debug(<span class=\"string\">`recive data <span class=\"subst\">$&#123;<span class=\"built_in\">JSON</span>.stringify(ctx.receive)&#125;</span>`</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> server: Server = <span class=\"keyword\">new</span> Server(config);</span><br><span class=\"line\"></span><br><span class=\"line\">server.use(decode.use);</span><br><span class=\"line\">server.use(router.route);</span><br><span class=\"line\">server.use(log);</span><br><span class=\"line\">server.use(encode.use);</span><br><span class=\"line\">server.use(writer.use);</span><br><span class=\"line\"></span><br><span class=\"line\">server.on(<span class=\"string\">&quot;start&quot;</span>, <span class=\"function\">(<span class=\"params\">conf</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    signale.debug(<span class=\"string\">`server start <span class=\"subst\">$&#123;conf.host&#125;</span>: <span class=\"subst\">$&#123;conf.port&#125;</span>`</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">server.start();</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Use-node-agent-cli-start-multiple-rpc-server\"><a href=\"#Use-node-agent-cli-start-multiple-rpc-server\" class=\"headerlink\" title=\"Use node-agent-cli start multiple rpc server\"></a>Use node-agent-cli start multiple rpc server</h3><p><a href=\"https://github.com/node-rpc/node-rpc-examples/blob/master/package.json#L12\">please view example</a>, also could use <a href=\"https://github.com/node-rpc/node-agent\">node-agent-cli</a>.</p>\n<h3 id=\"Using-with-Koa-and-Load-balancing-base-on-zookeeper\"><a href=\"#Using-with-Koa-and-Load-balancing-base-on-zookeeper\" class=\"headerlink\" title=\"Using with Koa and Load balancing base on zookeeper\"></a>Using with Koa and Load balancing base on zookeeper</h3><h4 id=\"Ready-to-work\"><a href=\"#Ready-to-work\" class=\"headerlink\" title=\"Ready to work\"></a>Ready to work</h4><p>You need to install Zookeeper locally, you can use docker to install the zookeeper image.<br>reference：</p>\n<ul>\n<li><a href=\"https://zookeeper.apache.org/doc/current/zookeeperStarted.html\">https://zookeeper.apache.org/doc/current/zookeeperStarted.html</a></li>\n<li><a href=\"https://hub.docker.com/_/zookeeper\">https://hub.docker.com/_/zookeeper</a></li>\n</ul>\n<h4 id=\"Coding\"><a href=\"#Coding\" class=\"headerlink\" title=\"Coding\"></a>Coding</h4><h5 id=\"server\"><a href=\"#server\" class=\"headerlink\" title=\"server\"></a>server</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Context, IServerConfig, NextFNType, Router, Server, V1Decode, V1Encode, Writer,  ZKClient &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;node-rpc-lite&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> signale <span class=\"keyword\">from</span> <span class=\"string\">&quot;signale&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> uuid <span class=\"keyword\">from</span> <span class=\"string\">&quot;uuid/v1&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> ZooKeeper <span class=\"keyword\">from</span> <span class=\"string\">&quot;zookeeper&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> config: IServerConfig = &#123;</span><br><span class=\"line\">    <span class=\"attr\">duration</span>: <span class=\"number\">500</span>,</span><br><span class=\"line\">    <span class=\"attr\">ip</span>: <span class=\"string\">&quot;127.0.0.1&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">port</span>: <span class=\"number\">9001</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> namespacePath = <span class=\"string\">&quot;/node-rpc&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> decode: V1Decode = <span class=\"keyword\">new</span> V1Decode();</span><br><span class=\"line\"><span class=\"keyword\">const</span> encode: V1Encode = <span class=\"keyword\">new</span> V1Encode();</span><br><span class=\"line\"><span class=\"keyword\">const</span> writer: Writer = <span class=\"keyword\">new</span> Writer();</span><br><span class=\"line\"><span class=\"keyword\">const</span> zkClient = <span class=\"keyword\">new</span> ZKClient(&#123;</span><br><span class=\"line\">    <span class=\"attr\">connect</span>: <span class=\"string\">&quot;127.0.0.1:2181&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">debug_level</span>: ZooKeeper.ZOO_LOG_LEVEL_WARN,</span><br><span class=\"line\">    <span class=\"attr\">host_order_deterministic</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"attr\">timeout</span>: <span class=\"number\">5000</span>,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> log = <span class=\"keyword\">async</span> (ctx: Context, <span class=\"attr\">next</span>: NextFNType) =&gt; &#123;</span><br><span class=\"line\">    signale.debug(<span class=\"string\">&quot;request is comming&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (next) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">await</span> next();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> uid: string = uuid();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 路由</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> router: Router = <span class=\"keyword\">new</span> Router();</span><br><span class=\"line\">router.on(<span class=\"string\">&quot;querywork&quot;</span>, <span class=\"keyword\">async</span> (ctx: Context) =&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">await</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">            ctx.dataWillBeEncode = &#123;</span><br><span class=\"line\">                <span class=\"attr\">send</span>: <span class=\"string\">&quot;send data after waiting 1000 ms&quot;</span>,</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\">            resolve();</span><br><span class=\"line\">        &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    signale.debug(<span class=\"string\">`recive data <span class=\"subst\">$&#123;<span class=\"built_in\">JSON</span>.stringify(ctx.receive)&#125;</span>, uuid: <span class=\"subst\">$&#123;uid&#125;</span>`</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> server: Server = <span class=\"keyword\">new</span> Server(config);</span><br><span class=\"line\"></span><br><span class=\"line\">server.use(decode.use);</span><br><span class=\"line\">server.use(router.route);</span><br><span class=\"line\">server.use(log);</span><br><span class=\"line\">server.use(encode.use);</span><br><span class=\"line\">server.use(writer.use);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> register =  <span class=\"keyword\">async</span> (conf: any) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> path = <span class=\"string\">`<span class=\"subst\">$&#123;namespacePath&#125;</span>/<span class=\"subst\">$&#123;conf.host&#125;</span>-<span class=\"subst\">$&#123;conf.port&#125;</span>`</span>;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> zkClient.connect();</span><br><span class=\"line\">    <span class=\"keyword\">const</span> isExit = <span class=\"keyword\">await</span> zkClient.exist(path, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!isExit) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">await</span> zkClient.mkdirp(path, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//</span></span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    signale.debug(<span class=\"string\">`server start <span class=\"subst\">$&#123;conf.host&#125;</span>: <span class=\"subst\">$&#123;conf.port&#125;</span>, uuid: <span class=\"subst\">$&#123;uid&#125;</span>`</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">server.on(<span class=\"string\">&quot;start&quot;</span>, register);</span><br><span class=\"line\"></span><br><span class=\"line\">server.start();</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"client-1\"><a href=\"#client-1\" class=\"headerlink\" title=\"client\"></a>client</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Router <span class=\"keyword\">from</span> <span class=\"string\">&quot;@koa/router&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> Koa <span class=\"keyword\">from</span> <span class=\"string\">&quot;koa&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Client, ISelectElement, IStrategy, StrategyFactory, ZKClient &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;node-rpc-lite&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> signale <span class=\"keyword\">from</span> <span class=\"string\">&quot;signale&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> ZooKeeper <span class=\"keyword\">from</span> <span class=\"string\">&quot;zookeeper&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> namespacePath = <span class=\"string\">&quot;/node-rpc&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> zkClient = <span class=\"keyword\">new</span> ZKClient(&#123;</span><br><span class=\"line\">    <span class=\"attr\">connect</span>: <span class=\"string\">&quot;127.0.0.1:2181&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">debug_level</span>: ZooKeeper.ZOO_LOG_LEVEL_WARN,</span><br><span class=\"line\">    <span class=\"attr\">host_order_deterministic</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"attr\">timeout</span>: <span class=\"number\">5000</span>,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Koa();</span><br><span class=\"line\"><span class=\"keyword\">const</span> router = <span class=\"keyword\">new</span> Router();</span><br><span class=\"line\"></span><br><span class=\"line\">router.get(<span class=\"string\">&quot;/rpc/get&quot;</span>, <span class=\"keyword\">async</span> (ctx, next) =&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> message = &#123;</span><br><span class=\"line\">        <span class=\"attr\">data</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">arr</span>: [],</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"attr\">identifier</span>: <span class=\"string\">&quot;querywork&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">msg</span>: <span class=\"string\">&quot;success&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">status</span>: <span class=\"number\">200</span>,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> list: string[] = zkClient.getNodeMap().get(namespacePath);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> els: ISelectElement[] = list.map(<span class=\"function\">(<span class=\"params\">value: string</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> pairs = value.split(<span class=\"string\">&quot;-&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">            <span class=\"attr\">ip</span>: pairs[<span class=\"number\">0</span>],</span><br><span class=\"line\">            <span class=\"attr\">port</span>: pairs[<span class=\"number\">1</span>] <span class=\"keyword\">as</span> unknown <span class=\"keyword\">as</span> number,</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// consistent hash</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> factory: StrategyFactory&lt;ISelectElement&gt; = <span class=\"keyword\">new</span> StrategyFactory();</span><br><span class=\"line\">    <span class=\"keyword\">const</span> consistentStrategy: IStrategy&lt;ISelectElement&gt; = factory.build(els, <span class=\"string\">&quot;c&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> testContent: string = <span class=\"string\">`127.0.0.1_<span class=\"subst\">$&#123;<span class=\"built_in\">Math</span>.random()&#125;</span>`</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> node: ISelectElement = consistentStrategy.select(testContent);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> client: Client = <span class=\"keyword\">new</span> Client(&#123;</span><br><span class=\"line\">        <span class=\"attr\">duration</span>: <span class=\"number\">500</span>,</span><br><span class=\"line\">        <span class=\"attr\">ip</span>: node.ip,</span><br><span class=\"line\">        <span class=\"attr\">port</span>: node.port,</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    client.connect();</span><br><span class=\"line\">    <span class=\"keyword\">const</span> work = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        client.on(<span class=\"string\">&quot;data&quot;</span>, <span class=\"function\">(<span class=\"params\">msg</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            ctx.response.body = msg;</span><br><span class=\"line\">            resolve();</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    client.push(message);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">await</span> work;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">app</span><br><span class=\"line\">  .use(router.routes())</span><br><span class=\"line\">  .use(router.allowedMethods());</span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> zkClient.connect();</span><br><span class=\"line\">    zkClient.listen(namespacePath);</span><br><span class=\"line\">    app.listen(<span class=\"number\">3000</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        signale.debug(<span class=\"string\">&quot;app start at port 3000!&quot;</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"code-example-is-at-here\"><a href=\"#code-example-is-at-here\" class=\"headerlink\" title=\"code example is at here\"></a>code example is at <a href=\"https://github.com/node-rpc/node-rpc-examples/blob/master/package.json#L12\">here</a></h4><p>Tip: run above code and visit <a href=\"http://localhost:3000/rpc/get\">http://localhost:3000/rpc/get</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"About-this-Repo\"><a href=\"#About-this-Repo\" class=\"headerlink\" title=\"About this Repo\"></a>About this Repo</h2><p>It’s a lite rpc framework base on Node.js. </p>\n<p>code source: <a href=\"https://github.com/node-rpc/node-rpc\">https://github.com/node-rpc/node-rpc</a></p>\n<p>with some features:</p>\n<ul>\n<li>using hessian protocol impleaments encode and decode operation.</li>\n<li>support middileware mechanism which is same as koa.</li>\n<li>can reiceve request base on event’s behavior.</li>\n<li>support customize define your own decoder and encoder.</li>\n<li>Load balancing base on Zookeeper</li>\n</ul>\n<h2 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h2><h3 id=\"install\"><a href=\"#install\" class=\"headerlink\" title=\"install\"></a>install</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i node-rpc-lite</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"direct-connection-mode\"><a href=\"#direct-connection-mode\" class=\"headerlink\" title=\"direct connection mode\"></a>direct connection mode</h3><h4 id=\"client\"><a href=\"#client\" class=\"headerlink\" title=\"client\"></a>client</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Client &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;node-rpc-lite&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> signale <span class=\"keyword\">from</span> <span class=\"string\">&quot;signale&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> port: number = <span class=\"number\">9000</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> ip: string = <span class=\"string\">&quot;127.0.0.1&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> duration: number = <span class=\"number\">100</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> client: Client = <span class=\"keyword\">new</span> Client(&#123;</span><br><span class=\"line\">    duration,</span><br><span class=\"line\">    ip,</span><br><span class=\"line\">    port,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">client.connect();</span><br><span class=\"line\">signale.debug(<span class=\"string\">&quot;connect success !!&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> message = &#123;</span><br><span class=\"line\">    <span class=\"attr\">data</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">arr</span>: [],</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">identifier</span>: <span class=\"string\">&quot;querywork&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">msg</span>: <span class=\"string\">&quot;success&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">status</span>: <span class=\"number\">200</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">client.on(<span class=\"string\">&quot;data&quot;</span>, <span class=\"function\">(<span class=\"params\">msg</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    signale.debug(<span class=\"string\">&quot;client recieve data:&quot;</span>);</span><br><span class=\"line\">    signale.debug(msg);</span><br><span class=\"line\"></span><br><span class=\"line\">    client.close();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">client.push(message);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Server\"><a href=\"#Server\" class=\"headerlink\" title=\"Server\"></a>Server</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Context, IServerConfig, NextFNType, Router, Server, V1Decode, V1Encode, Writer &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;node-rpc-lite&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> signale <span class=\"keyword\">from</span> <span class=\"string\">&quot;signale&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> config: IServerConfig = &#123;</span><br><span class=\"line\">    <span class=\"attr\">duration</span>: <span class=\"number\">500</span>,</span><br><span class=\"line\">    <span class=\"attr\">ip</span>: <span class=\"string\">&quot;127.0.0.1&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">port</span>: <span class=\"number\">9000</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> decode: V1Decode = <span class=\"keyword\">new</span> V1Decode();</span><br><span class=\"line\"><span class=\"keyword\">const</span> encode: V1Encode = <span class=\"keyword\">new</span> V1Encode();</span><br><span class=\"line\"><span class=\"keyword\">const</span> writer: Writer = <span class=\"keyword\">new</span> Writer();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> log = <span class=\"keyword\">async</span> (ctx: Context, <span class=\"attr\">next</span>: NextFNType) =&gt; &#123;</span><br><span class=\"line\">    signale.debug(<span class=\"string\">&quot;request is comming&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (next) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">await</span> next();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 路由</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> router: Router = <span class=\"keyword\">new</span> Router();</span><br><span class=\"line\">router.on(<span class=\"string\">&quot;querywork&quot;</span>, <span class=\"keyword\">async</span> (ctx: Context) =&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">await</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">            ctx.dataWillBeEncode = &#123;</span><br><span class=\"line\">                <span class=\"attr\">send</span>: <span class=\"string\">&quot;send data after waiting 1000 ms&quot;</span>,</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\">            resolve();</span><br><span class=\"line\">        &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    signale.debug(<span class=\"string\">`recive data <span class=\"subst\">$&#123;<span class=\"built_in\">JSON</span>.stringify(ctx.receive)&#125;</span>`</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> server: Server = <span class=\"keyword\">new</span> Server(config);</span><br><span class=\"line\"></span><br><span class=\"line\">server.use(decode.use);</span><br><span class=\"line\">server.use(router.route);</span><br><span class=\"line\">server.use(log);</span><br><span class=\"line\">server.use(encode.use);</span><br><span class=\"line\">server.use(writer.use);</span><br><span class=\"line\"></span><br><span class=\"line\">server.on(<span class=\"string\">&quot;start&quot;</span>, <span class=\"function\">(<span class=\"params\">conf</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    signale.debug(<span class=\"string\">`server start <span class=\"subst\">$&#123;conf.host&#125;</span>: <span class=\"subst\">$&#123;conf.port&#125;</span>`</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">server.start();</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Use-node-agent-cli-start-multiple-rpc-server\"><a href=\"#Use-node-agent-cli-start-multiple-rpc-server\" class=\"headerlink\" title=\"Use node-agent-cli start multiple rpc server\"></a>Use node-agent-cli start multiple rpc server</h3><p><a href=\"https://github.com/node-rpc/node-rpc-examples/blob/master/package.json#L12\">please view example</a>, also could use <a href=\"https://github.com/node-rpc/node-agent\">node-agent-cli</a>.</p>\n<h3 id=\"Using-with-Koa-and-Load-balancing-base-on-zookeeper\"><a href=\"#Using-with-Koa-and-Load-balancing-base-on-zookeeper\" class=\"headerlink\" title=\"Using with Koa and Load balancing base on zookeeper\"></a>Using with Koa and Load balancing base on zookeeper</h3><h4 id=\"Ready-to-work\"><a href=\"#Ready-to-work\" class=\"headerlink\" title=\"Ready to work\"></a>Ready to work</h4><p>You need to install Zookeeper locally, you can use docker to install the zookeeper image.<br>reference：</p>\n<ul>\n<li><a href=\"https://zookeeper.apache.org/doc/current/zookeeperStarted.html\">https://zookeeper.apache.org/doc/current/zookeeperStarted.html</a></li>\n<li><a href=\"https://hub.docker.com/_/zookeeper\">https://hub.docker.com/_/zookeeper</a></li>\n</ul>\n<h4 id=\"Coding\"><a href=\"#Coding\" class=\"headerlink\" title=\"Coding\"></a>Coding</h4><h5 id=\"server\"><a href=\"#server\" class=\"headerlink\" title=\"server\"></a>server</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Context, IServerConfig, NextFNType, Router, Server, V1Decode, V1Encode, Writer,  ZKClient &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;node-rpc-lite&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> signale <span class=\"keyword\">from</span> <span class=\"string\">&quot;signale&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> uuid <span class=\"keyword\">from</span> <span class=\"string\">&quot;uuid/v1&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> ZooKeeper <span class=\"keyword\">from</span> <span class=\"string\">&quot;zookeeper&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> config: IServerConfig = &#123;</span><br><span class=\"line\">    <span class=\"attr\">duration</span>: <span class=\"number\">500</span>,</span><br><span class=\"line\">    <span class=\"attr\">ip</span>: <span class=\"string\">&quot;127.0.0.1&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">port</span>: <span class=\"number\">9001</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> namespacePath = <span class=\"string\">&quot;/node-rpc&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> decode: V1Decode = <span class=\"keyword\">new</span> V1Decode();</span><br><span class=\"line\"><span class=\"keyword\">const</span> encode: V1Encode = <span class=\"keyword\">new</span> V1Encode();</span><br><span class=\"line\"><span class=\"keyword\">const</span> writer: Writer = <span class=\"keyword\">new</span> Writer();</span><br><span class=\"line\"><span class=\"keyword\">const</span> zkClient = <span class=\"keyword\">new</span> ZKClient(&#123;</span><br><span class=\"line\">    <span class=\"attr\">connect</span>: <span class=\"string\">&quot;127.0.0.1:2181&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">debug_level</span>: ZooKeeper.ZOO_LOG_LEVEL_WARN,</span><br><span class=\"line\">    <span class=\"attr\">host_order_deterministic</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"attr\">timeout</span>: <span class=\"number\">5000</span>,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> log = <span class=\"keyword\">async</span> (ctx: Context, <span class=\"attr\">next</span>: NextFNType) =&gt; &#123;</span><br><span class=\"line\">    signale.debug(<span class=\"string\">&quot;request is comming&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (next) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">await</span> next();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> uid: string = uuid();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 路由</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> router: Router = <span class=\"keyword\">new</span> Router();</span><br><span class=\"line\">router.on(<span class=\"string\">&quot;querywork&quot;</span>, <span class=\"keyword\">async</span> (ctx: Context) =&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">await</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">            ctx.dataWillBeEncode = &#123;</span><br><span class=\"line\">                <span class=\"attr\">send</span>: <span class=\"string\">&quot;send data after waiting 1000 ms&quot;</span>,</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\">            resolve();</span><br><span class=\"line\">        &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    signale.debug(<span class=\"string\">`recive data <span class=\"subst\">$&#123;<span class=\"built_in\">JSON</span>.stringify(ctx.receive)&#125;</span>, uuid: <span class=\"subst\">$&#123;uid&#125;</span>`</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> server: Server = <span class=\"keyword\">new</span> Server(config);</span><br><span class=\"line\"></span><br><span class=\"line\">server.use(decode.use);</span><br><span class=\"line\">server.use(router.route);</span><br><span class=\"line\">server.use(log);</span><br><span class=\"line\">server.use(encode.use);</span><br><span class=\"line\">server.use(writer.use);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> register =  <span class=\"keyword\">async</span> (conf: any) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> path = <span class=\"string\">`<span class=\"subst\">$&#123;namespacePath&#125;</span>/<span class=\"subst\">$&#123;conf.host&#125;</span>-<span class=\"subst\">$&#123;conf.port&#125;</span>`</span>;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> zkClient.connect();</span><br><span class=\"line\">    <span class=\"keyword\">const</span> isExit = <span class=\"keyword\">await</span> zkClient.exist(path, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!isExit) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">await</span> zkClient.mkdirp(path, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//</span></span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    signale.debug(<span class=\"string\">`server start <span class=\"subst\">$&#123;conf.host&#125;</span>: <span class=\"subst\">$&#123;conf.port&#125;</span>, uuid: <span class=\"subst\">$&#123;uid&#125;</span>`</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">server.on(<span class=\"string\">&quot;start&quot;</span>, register);</span><br><span class=\"line\"></span><br><span class=\"line\">server.start();</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"client-1\"><a href=\"#client-1\" class=\"headerlink\" title=\"client\"></a>client</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Router <span class=\"keyword\">from</span> <span class=\"string\">&quot;@koa/router&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> Koa <span class=\"keyword\">from</span> <span class=\"string\">&quot;koa&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Client, ISelectElement, IStrategy, StrategyFactory, ZKClient &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;node-rpc-lite&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> signale <span class=\"keyword\">from</span> <span class=\"string\">&quot;signale&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> ZooKeeper <span class=\"keyword\">from</span> <span class=\"string\">&quot;zookeeper&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> namespacePath = <span class=\"string\">&quot;/node-rpc&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> zkClient = <span class=\"keyword\">new</span> ZKClient(&#123;</span><br><span class=\"line\">    <span class=\"attr\">connect</span>: <span class=\"string\">&quot;127.0.0.1:2181&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">debug_level</span>: ZooKeeper.ZOO_LOG_LEVEL_WARN,</span><br><span class=\"line\">    <span class=\"attr\">host_order_deterministic</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"attr\">timeout</span>: <span class=\"number\">5000</span>,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Koa();</span><br><span class=\"line\"><span class=\"keyword\">const</span> router = <span class=\"keyword\">new</span> Router();</span><br><span class=\"line\"></span><br><span class=\"line\">router.get(<span class=\"string\">&quot;/rpc/get&quot;</span>, <span class=\"keyword\">async</span> (ctx, next) =&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> message = &#123;</span><br><span class=\"line\">        <span class=\"attr\">data</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">arr</span>: [],</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"attr\">identifier</span>: <span class=\"string\">&quot;querywork&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">msg</span>: <span class=\"string\">&quot;success&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">status</span>: <span class=\"number\">200</span>,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> list: string[] = zkClient.getNodeMap().get(namespacePath);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> els: ISelectElement[] = list.map(<span class=\"function\">(<span class=\"params\">value: string</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> pairs = value.split(<span class=\"string\">&quot;-&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">            <span class=\"attr\">ip</span>: pairs[<span class=\"number\">0</span>],</span><br><span class=\"line\">            <span class=\"attr\">port</span>: pairs[<span class=\"number\">1</span>] <span class=\"keyword\">as</span> unknown <span class=\"keyword\">as</span> number,</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// consistent hash</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> factory: StrategyFactory&lt;ISelectElement&gt; = <span class=\"keyword\">new</span> StrategyFactory();</span><br><span class=\"line\">    <span class=\"keyword\">const</span> consistentStrategy: IStrategy&lt;ISelectElement&gt; = factory.build(els, <span class=\"string\">&quot;c&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> testContent: string = <span class=\"string\">`127.0.0.1_<span class=\"subst\">$&#123;<span class=\"built_in\">Math</span>.random()&#125;</span>`</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> node: ISelectElement = consistentStrategy.select(testContent);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> client: Client = <span class=\"keyword\">new</span> Client(&#123;</span><br><span class=\"line\">        <span class=\"attr\">duration</span>: <span class=\"number\">500</span>,</span><br><span class=\"line\">        <span class=\"attr\">ip</span>: node.ip,</span><br><span class=\"line\">        <span class=\"attr\">port</span>: node.port,</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    client.connect();</span><br><span class=\"line\">    <span class=\"keyword\">const</span> work = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        client.on(<span class=\"string\">&quot;data&quot;</span>, <span class=\"function\">(<span class=\"params\">msg</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            ctx.response.body = msg;</span><br><span class=\"line\">            resolve();</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    client.push(message);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">await</span> work;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">app</span><br><span class=\"line\">  .use(router.routes())</span><br><span class=\"line\">  .use(router.allowedMethods());</span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> zkClient.connect();</span><br><span class=\"line\">    zkClient.listen(namespacePath);</span><br><span class=\"line\">    app.listen(<span class=\"number\">3000</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        signale.debug(<span class=\"string\">&quot;app start at port 3000!&quot;</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"code-example-is-at-here\"><a href=\"#code-example-is-at-here\" class=\"headerlink\" title=\"code example is at here\"></a>code example is at <a href=\"https://github.com/node-rpc/node-rpc-examples/blob/master/package.json#L12\">here</a></h4><p>Tip: run above code and visit <a href=\"http://localhost:3000/rpc/get\">http://localhost:3000/rpc/get</a></p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}